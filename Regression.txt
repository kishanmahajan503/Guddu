import statsmodels.api as sm
import numpy as np

# Draw random variables from a normal distribution with numpy
normalRandomVariables = np.random.normal(0,1, 1000)

# Create object that has descriptive statistics as variables
x = sm.stats.DescrStatsW(normalRandomVariables)
print(x)

# Mean
print(x.mean)
# Standard deviation
print(x.std)
# Variance
print(x.var)

# Generate confidence interval for a population proportion
tstar = 1.96
# Observer population proportion
p = .85
# Size of population
n = 659
# Construct confidence interval
sm.stats.proportion_confint(n * p, n)

import pandas as pd
# Import data that will be used to construct confidence interval of population mean
df = pd.read_csv("https://raw.githubusercontent.com/UMstatspy/UMStatsPy/master/Course_1/Cartwheeldata.csv")
# Generate confidence interval for a population mean
sm.stats.DescrStatsW(df["CWDistance"]).zconfint_mean()

# One population proportion hypothesis testing

# Population size
n = 1018
# Null hypothesis population proportion
pnull = .52
# Observe population proportion
phat = .56
# Calculate test statistic and p-value
sm.stats.proportions_ztest(phat * n, n, pnull)

---------------------------------------------------------------Ordinary Least Squares------------------------------------

da = pd.read_csv("nhanes_2015_2016.csv")
# Drop unused columns, drop rows with any missing values.
vars = ["BPXSY1", "RIDAGEYR", "RIAGENDR", "RIDRETH1", "DMDEDUC2", "BMXBMI",
        "SMQ020", "SDMVSTRA", "SDMVPSU"]
da = da[vars].dropna()

da["RIAGENDRx"] = da.RIAGENDR.replace({1: "Male", 2: "Female"})

model = sm.OLS.from_formula("BPXSY1 ~ RIDAGEYR + RIAGENDRx", data=da)
res = model.fit()
print(res.summary())


----------------------------------------------------------------------Generalized Linear Models---------------------------------

da["smq"] = da.SMQ020.replace({2: 0, 7: np.nan, 9: np.nan})
model = sm.GLM.from_formula("smq ~ RIAGENDRx", family=sm.families.Binomial(), data=da)
res = model.fit()
print(res.summary())


-------------------------------------------------------------Generalized Estimated Equations----------------------------


da["group"] = 10*da.SDMVSTRA + da.SDMVPSU
model = sm.GEE.from_formula("BPXSY1 ~ 1", groups="group", cov_struct=sm.cov_struct.Exchangeable(), data=da)
res = model.fit()
print(res.cov_struct.summary())


-----------------------------------------------------------#### Multilevel Models---------------------------------------------

for v in ["BPXSY1", "RIDAGEYR", "BMXBMI", "smq", "SDMVSTRA"]:
    model = sm.GEE.from_formula(v + " ~ 1", groups="group",
           cov_struct=sm.cov_struct.Exchangeable(), data=da)
    result = model.fit()
    print(v, result.cov_struct.summary())
